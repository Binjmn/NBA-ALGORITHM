name: NBA Model Training Pipeline

on:
  push:
    branches: [main, master]
    paths:
      - 'src/Model_training_pipeline/**'
      - 'tests/**'
  pull_request:
    branches: [main, master]
    paths:
      - 'src/Model_training_pipeline/**'
      - 'tests/**'
  schedule:
    # Run weekly on Monday at 1:00 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install test dependencies
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src/Model_training_pipeline --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  train-model:
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Train models
      run: |
        python -m src.Model_training_pipeline.pipeline
      env:
        API_KEY: ${{ secrets.NBA_API_KEY }}
    
    - name: Archive model artifacts
      uses: actions/upload-artifact@v2
      with:
        name: model-artifacts
        path: |
          results/models/*.pkl
          results/evaluation_report.json

  deploy-model:
    needs: train-model
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Download model artifacts
      uses: actions/download-artifact@v2
      with:
        name: model-artifacts
        path: artifacts/
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install deployment dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aws-cli
        # Add any other deployment tools needed
    
    - name: Deploy models to staging
      if: github.event.inputs.environment == 'staging'
      run: |
        # Copy models to staging S3 bucket
        aws s3 sync artifacts/ s3://nba-algorithm-models-staging/ --exclude "*" --include "*.pkl"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Deploy models to production
      if: github.event.inputs.environment == 'production'
      run: |
        # Copy models to production S3 bucket
        aws s3 sync artifacts/ s3://nba-algorithm-models-production/ --exclude "*" --include "*.pkl"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Update service with new models
      run: |
        # This could trigger a lambda function or update an ECS service
        curl -X POST "https://api.example.com/update-models" \
          -H "Authorization: Bearer ${{ secrets.SERVICE_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"environment": "${{ github.event.inputs.environment }}", "version": "${{ github.sha }}"}'
