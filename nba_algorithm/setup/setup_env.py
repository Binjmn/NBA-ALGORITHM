#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Environment Setup Script
Purpose: Automatically set up the Python virtual environment and install all required dependencies
         for the NBA Betting Prediction System.

This script will:
1. Create a virtual environment if it doesn't exist
2. Install all dependencies from requirements.txt
3. Initialize database structure
4. Set up logging configuration
5. Test the installation

Usage: python setup_env.py
"""

import os
import subprocess
import sys
import platform
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(os.path.join("logs", "setup.log"))
    ]
)
logger = logging.getLogger(__name__)


def create_directory_if_not_exists(directory):
    """
    Create directory if it doesn't exist
    
    Args:
        directory (str): Path to directory
    """
    if not os.path.exists(directory):
        os.makedirs(directory)
        logger.info(f"Created directory: {directory}")


def setup_virtual_environment():
    """
    Create and activate a virtual environment
    
    Returns:
        bool: True if virtual environment was set up successfully, False otherwise
    """
    venv_dir = "venv"
    
    # Check if virtual environment already exists
    if os.path.exists(venv_dir):
        logger.info(f"Virtual environment already exists at {venv_dir}")
        return True
    
    try:
        logger.info("Creating virtual environment...")
        subprocess.check_call([sys.executable, "-m", "venv", venv_dir])
        logger.info(f"Virtual environment created at {venv_dir}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to create virtual environment: {e}")
        return False


def install_dependencies():
    """
    Install dependencies from requirements.txt
    
    Returns:
        bool: True if dependencies were installed successfully, False otherwise
    """
    try:
        logger.info("Installing dependencies from requirements.txt...")
        
        # Get the path to pip in the virtual environment
        if platform.system() == "Windows":
            pip_path = os.path.join("venv", "Scripts", "pip.exe")
        else:
            pip_path = os.path.join("venv", "bin", "pip")
        
        subprocess.check_call([pip_path, "install", "-r", "requirements.txt"])
        logger.info("Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to install dependencies: {e}")
        return False


def create_config_files():
    """
    Create initial configuration files
    
    Returns:
        bool: True if configuration files were created successfully, False otherwise
    """
    try:
        # Create config files if they don't exist
        config_dir = "config"
        
        # Create example config.py file with placeholder values
        config_file = os.path.join(config_dir, "config.py")
        if not os.path.exists(config_file):
            with open(config_file, "w") as f:
                f.write('''\
# NBA Betting Prediction System Configuration
# Generated by setup_env.py on {}

# API Configuration (DO NOT COMMIT ACTUAL KEYS)
API_KEYS = {{
    'odds_api': 'YOUR_ODDS_API_KEY_HERE',
    'stats_api': 'YOUR_STATS_API_KEY_HERE'
}}

# Database Configuration
DATABASE_CONFIG = {{
    'host': 'localhost',
    'port': 5432,
    'database': 'nba_prediction',
    'user': 'postgres',
    'password': 'YOUR_PASSWORD_HERE'
}}

# Scheduling Configuration (All times in EST)
SCHEDULING_CONFIG = {{
    'first_predictions_time': '06:00',
    'performance_summary_time': '02:00',
    'stats_odds_update_times': ['10:00', '14:00', '18:00'],
    'live_data_interval_minutes': 10,
    'news_pregame_interval_minutes': 15,
    'news_regular_interval_minutes': 60,
    'clv_tracking_interval_minutes': 60
}}

# Model Configuration
MODEL_CONFIG = {{
    'drift_threshold': 0.05,  # 5% accuracy drop triggers retraining
    'target_accuracy': 0.75,  # 75% target accuracy
    'ensemble_method': 'logistic',  # Logistic regression for ensemble stacking
    'random_forest': {{
        'n_estimators': 100,
        'max_depth': 10
    }},
    'xgboost': {{
        'n_estimators': 100,
        'learning_rate': 0.1,
        'max_depth': 6
    }},
    'lightgbm': {{
        'n_estimators': 100,
        'learning_rate': 0.1,
        'num_leaves': 31
    }}
}}

# Logging Configuration
LOGGING_CONFIG = {{
    'log_level': 'INFO',
    'log_file': 'logs/app.log',
    'log_format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
}}
'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            logger.info(f"Created config file: {config_file}")
        
        # Create example secrets.py file with placeholder values
        secrets_file = os.path.join(config_dir, "secrets.py")
        if not os.path.exists(secrets_file):
            with open(secrets_file, "w") as f:
                f.write('''\
# NBA Betting Prediction System Secrets
# Generated by setup_env.py on {}
# WARNING: This file should NEVER be committed to version control

# API Keys
ODDS_API_KEY = "YOUR_ODDS_API_KEY_HERE"
STATS_API_KEY = "YOUR_STATS_API_KEY_HERE"

# Database Credentials
DB_PASSWORD = "YOUR_DATABASE_PASSWORD_HERE"

# Encryption Key for Secure Storage
ENCRYPTION_KEY = "GENERATE_A_SECURE_RANDOM_KEY_HERE"
'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            logger.info(f"Created secrets file: {secrets_file}")
        
        # Create gitignore specifically for the config directory
        config_gitignore = os.path.join(config_dir, ".gitignore")
        if not os.path.exists(config_gitignore):
            with open(config_gitignore, "w") as f:
                f.write('''\
# Ignore secrets file containing API keys and passwords
secrets.py

# Ignore environment-specific configuration files
*_local.py
*_development.py
*_production.py

# Ignore compiled Python files in this directory
*.pyc
__pycache__/
''')
            logger.info(f"Created .gitignore for config directory: {config_gitignore}")
        
        return True
    except Exception as e:
        logger.error(f"Failed to create config files: {e}")
        return False


def setup_initial_source_files():
    """
    Create initial source files and directory structure
    
    Returns:
        bool: True if source files were created successfully, False otherwise
    """
    try:
        src_dir = "src"
        
        # Create __init__.py files for all directories
        for dir_path in [src_dir, os.path.join(src_dir, "api"), os.path.join(src_dir, "models"),
                         os.path.join(src_dir, "data"), os.path.join(src_dir, "utils")]:
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)
                logger.info(f"Created directory: {dir_path}")
            
            init_file = os.path.join(dir_path, "__init__.py")
            if not os.path.exists(init_file):
                with open(init_file, "w") as f:
                    f.write('''\
# NBA Betting Prediction System
# Generated by setup_env.py on {}
'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                logger.info(f"Created __init__.py in {dir_path}")
        
        # Create setup_logging.py
        setup_logging_file = os.path.join(src_dir, "utils", "setup_logging.py")
        if not os.path.exists(setup_logging_file):
            with open(setup_logging_file, "w") as f:
                f.write('''\
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Logging Setup Module
Purpose: Configure logging for the NBA Betting Prediction System.
"""

import logging
import os
import sys
from logging.handlers import RotatingFileHandler


def setup_logging(log_file="logs/app.log", level=logging.INFO):
    """
    Set up logging configuration
    
    Args:
        log_file (str): Path to log file
        level (int): Logging level (e.g., logging.INFO, logging.DEBUG)
        
    Returns:
        logging.Logger: Configured logger object
    """
    # Create logs directory if it doesn't exist
    log_dir = os.path.dirname(log_file)
    os.makedirs(log_dir, exist_ok=True)
    
    # Configure root logger
    logger = logging.getLogger()
    logger.setLevel(level)
    
    # Remove existing handlers to avoid duplicates
    for handler in logger.handlers:
        logger.removeHandler(handler)
    
    # Create formatters
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S %Z'  # Include timezone
    )
    console_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%H:%M:%S'  # Shorter format for console
    )
    
    # Configure file handler with rotation (10 MB max, keep 10 backup files)
    file_handler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=10)
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(level)
    logger.addHandler(file_handler)
    
    # Configure console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(level)
    logger.addHandler(console_handler)
    
    # Log initialization
    logger.info("Logging initialized")
    
    return logger


if __name__ == "__main__":
    # Example usage
    logger = setup_logging(level=logging.DEBUG)
    logger.debug("Debug message")
    logger.info("Info message")
    logger.warning("Warning message")
    logger.error("Error message")
    logger.critical("Critical message")
''')
            logger.info(f"Created setup_logging.py: {setup_logging_file}")
        
        return True
    except Exception as e:
        logger.error(f"Failed to create initial source files: {e}")
        return False


def setup_tests():
    """
    Set up initial test structure
    
    Returns:
        bool: True if test structure was set up successfully, False otherwise
    """
    try:
        tests_dir = "tests"
        
        # Create __init__.py for tests directory
        init_file = os.path.join(tests_dir, "__init__.py")
        if not os.path.exists(init_file):
            with open(init_file, "w") as f:
                f.write('''\
# NBA Betting Prediction System Tests
# Generated by setup_env.py on {}
'''.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
            logger.info(f"Created __init__.py in tests directory: {init_file}")
        
        # Create a basic test file
        test_file = os.path.join(tests_dir, "test_setup.py")
        if not os.path.exists(test_file):
            with open(test_file, "w") as f:
                f.write('''\
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Basic Test Setup
Purpose: Verify that the testing environment is properly configured.
"""

import os
import sys
import unittest

# Add the src directory to the path for imports
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))


class TestSetup(unittest.TestCase):
    """Test case to verify that the testing environment is properly set up."""
    
    def test_import_paths(self):
        """Test that we can import from our src directory."""
        # Try importing a module from src
        try:
            from utils import setup_logging
            self.assertTrue(True)  # If we got here, the import worked
        except ImportError as e:
            self.fail(f"Failed to import from src directory: {e}")
    
    def test_environment(self):
        """Test that our environment is properly set up."""
        # Verify that the tests directory is correctly structured
        self.assertTrue(os.path.exists('tests'), "Tests directory does not exist")
        
        # Verify that the src directory is correctly structured
        self.assertTrue(os.path.exists('src'), "Src directory does not exist")
        
        # Verify that the config directory is correctly structured
        self.assertTrue(os.path.exists('config'), "Config directory does not exist")


if __name__ == '__main__':
    unittest.main()
''')
            logger.info(f"Created test_setup.py: {test_file}")
        
        return True
    except Exception as e:
        logger.error(f"Failed to set up tests: {e}")
        return False


def main():
    """
    Main function to set up the environment
    """
    logger.info("=== NBA Betting Prediction System - Environment Setup ===")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Platform: {platform.platform()}")
    
    # Create necessary directories
    for directory in ["logs", "data", "config", "src", "tests"]:
        create_directory_if_not_exists(directory)
    
    # Set up virtual environment
    if not setup_virtual_environment():
        logger.error("Failed to set up virtual environment. Exiting.")
        return False
    
    # Install dependencies
    if not install_dependencies():
        logger.error("Failed to install dependencies. Exiting.")
        return False
    
    # Create configuration files
    if not create_config_files():
        logger.error("Failed to create configuration files. Exiting.")
        return False
    
    # Set up initial source files
    if not setup_initial_source_files():
        logger.error("Failed to set up initial source files. Exiting.")
        return False
    
    # Set up tests
    if not setup_tests():
        logger.error("Failed to set up tests. Exiting.")
        return False
    
    logger.info("=== Environment setup completed successfully! ===")
    logger.info("""Next steps:
1. Update API keys in config/secrets.py
2. Update database configuration in config/config.py
3. Run the tests: python -m pytest tests/
4. Start development!""")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
