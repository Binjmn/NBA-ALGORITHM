#!/bin/bash
# Startup script for NBA Prediction System Docker container

set -e

# Define log file
LOG_FILE="/app/logs/startup.log"
DATESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# Create logs directory if it doesn't exist
mkdir -p /app/logs

# Log starting message
echo "[$DATESTAMP] Starting NBA Prediction System" | tee -a $LOG_FILE

# Function to wait for PostgreSQL to be ready
wait_for_postgres() {
    echo "[$DATESTAMP] Waiting for PostgreSQL to be ready..." | tee -a $LOG_FILE
    
    RETRIES=30
    while [ $RETRIES -gt 0 ]
    do
        pg_isready -h "$POSTGRES_HOST" -p "$POSTGRES_PORT" -U "$POSTGRES_USER" && break
        echo "[$DATESTAMP] Waiting for PostgreSQL... ($RETRIES retries left)" | tee -a $LOG_FILE
        RETRIES=$((RETRIES-1))
        sleep 2
    done
    
    if [ $RETRIES -eq 0 ]
    then
        echo "[$DATESTAMP] ERROR: Failed to connect to PostgreSQL." | tee -a $LOG_FILE
        return 1
    fi
    
    echo "[$DATESTAMP] PostgreSQL is ready!" | tee -a $LOG_FILE
    return 0
}

# Function to initialize database
initialize_database() {
    echo "[$DATESTAMP] Initializing database..." | tee -a $LOG_FILE
    
    # Run the database initialization script
    python -m src.database.init_db --verbose | tee -a $LOG_FILE
    
    if [ ${PIPESTATUS[0]} -eq 0 ]
    then
        echo "[$DATESTAMP] Database initialized successfully." | tee -a $LOG_FILE
        return 0
    else
        echo "[$DATESTAMP] ERROR: Database initialization failed." | tee -a $LOG_FILE
        return 1
    fi
}

# Function to check API keys
check_api_keys() {
    echo "[$DATESTAMP] Checking API keys..." | tee -a $LOG_FILE
    
    if [ -z "$ODDS_API_KEY" ]
    then
        echo "[$DATESTAMP] WARNING: ODDS_API_KEY is not set. Some data collection features will not work." | tee -a $LOG_FILE
    fi
    
    if [ -z "$BALLDONTLIE_API_KEY" ]
    then
        echo "[$DATESTAMP] WARNING: BALLDONTLIE_API_KEY is not set. Some data collection features will not work." | tee -a $LOG_FILE
    fi
    
    # Create/update API keys file
    mkdir -p /app/config
    cat > /app/config/api_keys.py << EOL
"""
API Keys Configuration

This file is auto-generated by the Docker startup script.
Do not edit manually as changes will be overwritten.
"""

# The Odds API key for odds data
ODDS_API_KEY = "${ODDS_API_KEY}"

# BallDontLie API key for NBA stats
BALLDONTLIE_API_KEY = "${BALLDONTLIE_API_KEY}"
EOL
    
    echo "[$DATESTAMP] API keys configuration updated." | tee -a $LOG_FILE
}

# Function to start cron service
start_cron_service() {
    echo "[$DATESTAMP] Starting cron service..." | tee -a $LOG_FILE
    
    # Start cron in the background
    cron
    
    if [ $? -eq 0 ]
    then
        echo "[$DATESTAMP] Cron service started successfully." | tee -a $LOG_FILE
        return 0
    else
        echo "[$DATESTAMP] ERROR: Failed to start cron service." | tee -a $LOG_FILE
        return 1
    fi
}

# Function to start the API server
start_api_server() {
    echo "[$DATESTAMP] Starting API server..." | tee -a $LOG_FILE
    
    # Start the API server in the background
    python -m src.api.server &
    API_SERVER_PID=$!
    
    # Wait for the server to start
    sleep 5
    
    # Check if the server is running
    if kill -0 $API_SERVER_PID 2>/dev/null
    then
        echo "[$DATESTAMP] API server started successfully." | tee -a $LOG_FILE
        return 0
    else
        echo "[$DATESTAMP] ERROR: Failed to start API server." | tee -a $LOG_FILE
        return 1
    fi
}

# Main execution flow
echo "[$DATESTAMP] --------------------------------" | tee -a $LOG_FILE
echo "[$DATESTAMP] NBA Prediction System Startup" | tee -a $LOG_FILE
echo "[$DATESTAMP] --------------------------------" | tee -a $LOG_FILE

# Wait for PostgreSQL
if wait_for_postgres
then
    # Initialize database
    if initialize_database
    then
        # Check API keys
        check_api_keys
        
        # Start cron service
        start_cron_service
        
        # Start auto-train manager
        echo "[$DATESTAMP] Starting Auto Train Manager..." | tee -a $LOG_FILE
        python -m src.utils.auto_train_manager --daemon &
        
        # Start API server
        start_api_server
        
        # Everything is up and running, keep the container alive
        echo "[$DATESTAMP] NBA Prediction System started successfully." | tee -a $LOG_FILE
        
        # Run initial data collection if API keys are set
        if [ ! -z "$ODDS_API_KEY" ] && [ ! -z "$BALLDONTLIE_API_KEY" ]
        then
            echo "[$DATESTAMP] Running initial data collection..." | tee -a $LOG_FILE
            python -m src.data.data_collector --full | tee -a $LOG_FILE &
        fi
        
        # Keep the script running to keep the container alive
        tail -f /dev/null & wait $!
    else
        echo "[$DATESTAMP] ERROR: Startup failed during database initialization." | tee -a $LOG_FILE
        exit 1
    fi
else
    echo "[$DATESTAMP] ERROR: Startup failed while waiting for PostgreSQL." | tee -a $LOG_FILE
    exit 1
fi
